const TelegramApi = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');

const token = '7692071006:AAEd1K_CTanWLJ6uhsehjsFeBmk1B1emlbw';
const { gameOptions, againOptions, startProjectOptions } = require('./options.js');

const bot = new TelegramApi(token, { polling: true });
const app = express();

app.use(express.json());
app.use(cors());

bot.setMyCommands([
    { command: '/start', description: '–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: '/info', description: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
    { command: '/game', description: '—Ç–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞' },
]);

const chats = {};

const startGame = async (chatId) => {
    await bot.sendMessage(chatId, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9 - –æ—Ç–≥–∞–¥–∞–π)");
    const randomNum = Math.floor(Math.random() * 10);
    chats[chatId] = randomNum;
    await bot.sendMessage(chatId, '–¥–∞–≤–∞–π –≤—ã–±–∏—Ä–∞–π', gameOptions);
};

const start = async () => {
    bot.on('message', async (msg) => {
        const text = msg.text;
        const chatId = msg.chat.id;

        try {
            if (text === '/again') {
                return startGame(chatId);
            }
            if (text === '/start') {
                return bot.sendMessage(chatId, "–Ω—É –ø—Ä–∏–≤–µ—Ç, —Ñ–æ—Ä–º–æ—à–ª–µ–ø! ", startProjectOptions);
            }
            if (text === '/info') {
               
                return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}`);
            }
            if (text === '/game') {
                await bot.sendMessage(chatId, `–ò–≥—Ä–µ–º, ${msg.from.first_name}?`);
                return startGame(chatId);
            }
            console.log(msg);
            return bot.sendMessage(chatId, `–¢—ã –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ: ${text}?`);
        } catch (e) {
            bot.sendMessage(chatId, 'üõë –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É: ' + e.message);
        }
    });

    bot.on('callback_query', async (msg) => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (data === '/again') {
            return startGame(chatId);
        }
        if (data == chats[chatId]) {
            await bot.sendMessage(chatId, '–£–≥–∞–¥–∞–ª! üéâ', againOptions);
        } else {
            await bot.sendMessage(chatId, `–ù–µ —É–≥–∞–¥–∞–ª. üò¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${chats[chatId]}`, againOptions);
        }
    });
};

app.post('/web-data', async (req, res) => {
    console.log(' -_- –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ /web-data:', req.body); 

    try {
        const { queryId } = req.body;
        if (!queryId) {
            console.log('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç queryId');
            return res.status(400).json({ error: 'queryId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω queryId:', queryId);
        return res.status(200).json({ success: true, message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!' });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ /web-data:', e.message);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});


app.post('/api/send-message', async (req, res) => {
    console.log('Request :', req.body);
    const { chatId, message } = req.body;

    if (!chatId || !message) {
        console.log('Error chatId or message');
        return res.status(400).json({ error: 'chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        await bot.sendMessage(chatId, message);
        console.log("0_0", message, chatId);
        res.status(200).json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç!' });
    } catch (error) {
        console.error('Error sending message to bot:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç' });
    }
});

const PORT = 8000;
app.listen(PORT, () => {
    console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É _:", PORT);
    start();
});
