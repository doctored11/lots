const pool = require('../db');
const { sendMessage } = require('../services/botService');


const { getSlotGameByUserId, createSlotGame, updateSlotState } = require('./slotsLogic/slotsModel');
const { calculateWinnings, generateRandomColor, generateRandomBetStep, generateRandomLives, generateNewReel } = require('./slotsLogic/gameLogic');
const { getUserByChatId, updateUserBalance,getUserBalance} = require('./userController');


async function getSlotInfo(req, res) {
    const { chatId } = req.params;

    try {
        console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è chatId:", chatId);
        const user = await getUserByChatId(chatId);
        if (!user) {
            console.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", chatId);
            return res.status(404).json({ success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const slotGame = await getSlotGameByUserId(user.id);
        console.log("—Å–ª–æ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –±–¥:",slotGame)
        if (!slotGame) return res.status(404).json({ success: false, error: "Slot machine not found" });

       
        res.status(200).json({
            success: true,
            data: slotGame,
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–µ:", error);
        res.status(500).json({ success: false, error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};


const spinSlot = async (req, res) => {
    const { chatId, bet, balance } = req.body;

    try {
        const user = await getUserByChatId(chatId);
        if (!user) {
            return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const currentBalance = await validateBalance(chatId, balance);


        if (typeof bet !== 'number' || bet <= 0 || bet > currentBalance || currentBalance - bet < 0) {
            console.warn(
                `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: \n- –°—Ç–∞–≤–∫–∞: ${bet}\n- –ë–∞–ª–∞–Ω—Å: ${currentBalance}`
            );
            return res.status(400).json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ü§®' });
        }

        const slotGame = await getSlotGameByUserId(user.id);
        if (!slotGame) {
            slotGame = await createSlotGame(user.id);
        }
        console.log('*__ .')
        console.log('slotGame:', slotGame);
        console.log('reel field:', slotGame.reel);



        const reel = slotGame.reel;


        console.log('Reel:', reel);

        const combination = [
            Math.floor(Math.random() * reel.length),
            Math.floor(Math.random() * reel.length),
            Math.floor(Math.random() * reel.length),
        ];
        const results = combination.map(index => reel[index]);
        console.log('–≤—ã–ø–∞–≤—à–∏–µ —Å–∏–º–≤–æ–ª—ã:', results);
        console.log("________–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º_______")
        console.log("\n –ø—Ä–∏—à–ª–æ: ", balance, bet, "|", currentBalance)
        console.log("_____")
        const winnings = calculateWinnings(bet, results);
        const newBalance = currentBalance - bet + winnings;
        await updateUserBalance(chatId, newBalance);

        console.log("–±–∞–¥–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω", currentBalance, bet, winnings, newBalance)
        console.log("–ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ—Ç—ã")
        await updateSlotState(user.id, {
            ...slotGame,
            last_win: winnings,
            max_win: Math.max(slotGame.max_win, winnings),
            machine_lives: slotGame.machine_lives - 1,
            color: slotGame.color,
        });
        console.log("–æ–±–Ω–æ–≤–∏–ª–∏ —Å–ª–æ—Ç—ã")
        res.status(200).json({
            success: true,
            data: { combination, newBalance },
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ spinSlot:', error);
        res.status(500).json({ success: false, error: error.message });
    }
};

const changeMachine = async (req, res) => {
    const { chatId, balance, machineCost } = req.body;
    console.log('    -  –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∞:', req.body);

    if (!chatId || typeof balance === 'undefined' || typeof machineCost !== 'number' || machineCost <= 0) {
        return res.status(400).json({ success: false, error: '–ß–µ–≥–æ —Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç' });
    }

    try {
        const user = await getUserByChatId(chatId);
        if (!user) {
            return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const currentBalance = await validateBalance(chatId, balance);

        let slotGame = await getSlotGameByUserId(user.id);
        if (!slotGame) {

            slotGame = await createSlotGame(user.id);
        }

        if (currentBalance - machineCost < 0) {
            console.log("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–º–µ–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∞")
            return res.status(400).json({ success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–º–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∞' });
        }

        const newReel = generateNewReel();
        const newColor = generateRandomColor();
        const newBetStep = generateRandomBetStep();
        const newLives = generateRandomLives();

        const newBalance = currentBalance - machineCost;

        await updateUserBalance(chatId, newBalance);

        await updateSlotState(user.id, {
            ...slotGame,
            reel: newReel,
            bet_step: newBetStep, 
            last_win: 0,
            max_win: 0,
            machine_lives: newLives,
            color: newColor,
        });

        res.status(200).json({
            success: true,
            data: {
                newReel,
                newColor,
                newBetStep,
                newLives,
                newBalance,
            },
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ changeMachine:', error);
        res.status(500).json({ success: false, error: error.message });
    }
};

async function validateBalance(chatId, providedBalance) {
    const userBalance = await getUserBalance(chatId);
    if (userBalance !== providedBalance) {
        console.warn(
            `‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞: \n- –í –ë–î: ${userBalance}\n- –ü—Ä–∏—Å–ª–∞–Ω–æ —Å –∫–ª–∏–µ–Ω—Ç–∞: ${providedBalance}`
        );
    }
    return userBalance;
}





module.exports = { spinSlot, changeMachine, getSlotInfo };
