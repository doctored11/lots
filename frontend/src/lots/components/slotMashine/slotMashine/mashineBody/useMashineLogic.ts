import { useState, useContext } from "react";
import { SlotContext } from "../SlotContext";
import { PlayerContext } from "../../../../../PlayerContext";
import { useGameAPI } from "../../../../../api/useLotsAPI";
import { ChangeMashine } from "../../../../../lots/components/changeMashine/ChangeMashine";
import { REWARDS } from "../../../../../lots/constants/drumConstants";

export function useMashineLogic() {
  const slotMashine = useContext(SlotContext);
  const player = useContext(PlayerContext);
  const { spinSlots } = useGameAPI();

  const [spinValues, setSpinValues] = useState<number[]>([0, 0, 0]);

  const [pendingBalance, setPendingBalance] = useState<number | null>(null);

  async function startSpin() {
    try {
      if (!player || !slotMashine || slotMashine.isSpinning) return;
      slotMashine.setIsSpinning(true);
      const response = await spinSlots(
        player.chatId,
        slotMashine.betInGame,
        player.balance + slotMashine.betInGame
      );
      if (response.success) {
        if (response.action === "changeMachine") {
          setPendingBalance(null);
          console.log("‚öôÔ∏è —Å–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º");
          handleMachineChange(response.data);
          return;
        }
        const { combination, newBalance, machineLives } = response.data;
        //–¥–∞–≤–∞–π –∏ —Ç—É—Ç —Å–µ—Ç–∏—Ç—å –∂–∏–∑–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∞ - –ø–æ–∑–∂–µ –∫ –Ω–∏–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—é

        console.log("ü§î –ù–æ–≤–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:", combination);
        console.log("–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (–æ–∂–∏–¥–∞–µ—Ç—Å—è):", newBalance);

        setSpinValues(combination);
        setPendingBalance(newBalance);
        slotMashine.setMachineLives(machineLives);
        console.log("–∂–∏–∑–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∞", machineLives);
      } else {
        alert("–û—à–∏–±–∫–∞: " + response.error);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–ø–∏–Ω–∞:", err);
    } finally {
      slotMashine?.setBetInGame(0);
    }
  }
  function handleMachineChange(data: {
    newReel:  Array<keyof typeof REWARDS>;
    newLives: number;
    newBetStep: number;
    newColor: string;
    balance: number;
  }) {
    if(!slotMashine) return
    slotMashine.setReel(data.newReel);
    slotMashine.setMachineLives(data.newLives);
    slotMashine.setBetStep(data.newBetStep);
    slotMashine.setColor(data.newColor);
    player?.setBalance(data.balance);

    console.log("üí• –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç:", data);

    slotMashine.setIsSpinning(false);

    slotMashine.endAnimation();
  }
  function onSpinEnd() {
    if (pendingBalance !== null && player) {
      console.log("‚úîÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ª–æ—Ç.");
      const winValue = pendingBalance - player.balance;
      player.addBalance(winValue);
      slotMashine?.updateSlotScore(winValue);
      slotMashine?.setBetInGame(0);
      setPendingBalance(null);
    }
    slotMashine?.setIsSpinning(false);
  }

  return {
    spinValues,
    isSpinning: slotMashine?.isSpinning,
    startSpin,
    onSpinEnd,
  };
}
